--- src/FileToMedia.php
+++ src/FileToMedia.php
@@ -4,6 +4,7 @@ namespace Drupal\filefield_to_mediafield;
 
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
+use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
 use Psr\Log\LoggerInterface;
 
@@ -42,15 +43,17 @@ class FileToMedia implements FileToMediaInterface {
   /**
    * {@inheritdoc}
    */
-  public function createMediaEntity(FileInterface $file, string $media_bundle, string $media_entity_file_field_name): Media {
+  public function createMediaEntity($file, string $media_bundle, string $media_entity_file_field_name): Media {
+    $file_entity = File::load($file['target_id']);
     $media_entity = Media::create([
       'bundle' => $media_bundle,
       'uid' => '1',
-      'name' => !empty($file->alt) ? $file->alt : $file->label() . ', FID: ' . $file->id(),
+      'name' => !empty($file['alt']) ? $file['alt'] : $file_entity->label() . ', FID: ' . $file_entity->id(),
       'status' => 1,
       $media_entity_file_field_name => [
-        'target_id' => $file->id(),
-        'alt' => $file->alt,
+        'target_id' => $file_entity->id(),
+        'alt' => !empty($file['alt']) ? $file['alt'] : '',
+        'title' => !empty($file['title']) ? $file['title'] : '',
       ],
     ]);
     $media_entity->save();
@@ -89,19 +92,56 @@ class FileToMedia implements FileToMediaInterface {
           continue;
         }
         try {
-          $file = $entity->{$source_file_field_name}->entity;
-          $entity->{$target_media_field_name}->entity = $this->createMediaEntity($file, $media_bundle, $media_entity_file_field_name);
+          $files = $entity->get($source_file_field_name)->getValue();
+          $entity->set($target_media_field_name, NULL);
+
+          // Get stored hashes of image files.
+          $hashes = \Drupal::state()->get('filefield_to_mediafield.hashes_of_image_files');
+
+          foreach ($files as $file) {
+            // Get hash of the current image file.
+            $fid = $file['target_id'];
+            $fileUri = \Drupal::entityTypeManager()
+              ->getStorage('file')
+              ->load($fid)
+              ->getFileUri();
+            $hash = sha1_file($fileUri);
+
+            // Check if the Media entity with such image already exists.
+            // Compare hash of the image file with hashes that was stored previously.
+            // The structure of the $hashes array: ['media id' => 'hash of image file']
+            // 'media id' is id of the Media entity that contains the image file that
+            // was hashed.
+            $mid = array_search($hash, $hashes);
+            if ($mid) {
+              // Load the Media entity that has the current image and return it.
+              $media = \Drupal::entityTypeManager()
+                ->getStorage('media')
+                ->load($mid);
+            } else {
+              // get file, create media items, and add them to the target field
+              $media = $this->createMediaEntity($file, $media_bundle, $media_entity_file_field_name);
+
+              // Store the media id and hash of the image file.
+              $hashes[$media->id()] = $hash;
+              \Drupal::state()->set('filefield_to_mediafield.hashes_of_image_files', $hashes);
+            }
+
+            // add media to node
+            $entity->get($target_media_field_name)->appendItem($media);
+
+            $this->logger->notice(
+              'Copied file "@file" in @entity_type "@entity" from field "@source_file_field_name" to media field "@target_media_field_name".',
+              [
+                '@file' => $media->label() . ', FID:' . $media->id(),
+                '@entity_type' => $entity_type,
+                '@entity' => $entity->label(),
+                '@source_file_field_name' => $source_file_field_name,
+                '@target_media_field_name' => $target_media_field_name,
+              ]
+            );
+          }
           $entity->save();
-          $this->logger->notice(
-            'Copied file "@file" in @entity_type "@entity" from field "@source_file_field_name" to media field "@target_media_field_name".',
-            [
-              '@file' => $file->label() . ', FID:' . $file->id(),
-              '@entity_type' => $entity_type,
-              '@entity' => $entity->label(),
-              '@source_file_field_name' => $source_file_field_name,
-              '@target_media_field_name' => $target_media_field_name,
-            ]
-          );
         }
         catch (\Exception $e) {
           $this->logger->error($e->getMessage());
